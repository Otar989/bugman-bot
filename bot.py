import os
import asyncio
import logging

from aiohttp import web
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ---------- –õ–æ–≥–∏ ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("bugman")

# ---------- –ö–æ–Ω—Ñ–∏–≥ ----------
# –í Render –¥–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TOKEN (–æ–±—è–∑.), APP_URL (–æ–ø—Ü.), MEDIA_URL (–æ–ø—Ü.)
TOKEN = os.environ["TOKEN"]
APP_URL = os.environ.get("APP_URL", "https://otar989.github.io/bugman-miniapp-/")
MEDIA_URL = os.environ.get(
    "MEDIA_URL",
    "https://github.com/Otar989/bugman-bot/blob/main/bugman.gif?raw=true",
)

# ---------- Telegram-handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", web_app=WebAppInfo(url=APP_URL))]]
    markup = InlineKeyboardMarkup(kb)
    caption = (
        "üëæ –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bugman!\n\n"
        "–ñ–º–∏ ¬´–ò–≥—Ä–∞—Ç—å¬ª ‚Äî Mini App –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ Telegram."
    )

    chat_id = update.effective_chat.id
    message = update.effective_message

    # –ü—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ GIF, –µ—Å–ª–∏ –Ω–µ –≤—ã–π–¥–µ—Ç ‚Äî –∫–∞–∫ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –¥–µ—Å–∫—Ç–æ–ø-–∫–ª–∏–µ–Ω—Ç–µ)
    try:
        if message:
            await message.reply_animation(animation=MEDIA_URL, caption=caption, reply_markup=markup)
        else:
            await context.bot.send_animation(chat_id=chat_id, animation=MEDIA_URL, caption=caption, reply_markup=markup)
    except Exception:
        try:
            if message:
                await message.reply_photo(photo=MEDIA_URL, caption=caption, reply_markup=markup)
            else:
                await context.bot.send_photo(chat_id=chat_id, photo=MEDIA_URL, caption=caption, reply_markup=markup)
        except Exception:
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —Ö–æ—Ç—è –±—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–∫—Å—Ç–æ–º
            if message:
                await message.reply_text(text=caption, reply_markup=markup)
            else:
                await context.bot.send_message(chat_id=chat_id, text=caption, reply_markup=markup)

# ---------- Aiohttp health ----------
async def health(_: web.Request) -> web.Response:
    return web.Response(text="Bugman bot is running ‚úÖ")

# ---------- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π main: –±–æ—Ç + –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ–¥–Ω–æ–º event loop ----------
async def main():
    # --- Telegram Application ---
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (polling) –±–µ–∑ run_polling, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Ü–∏–∫–ª–æ–º —Å–∞–º–∏
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    log.info("Telegram bot polling started")

    # --- Aiohttp server (–¥–ª—è Render) ---
    port = int(os.environ.get("PORT", 10000))
    app = web.Application()
    app.router.add_get("/", health)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()
    log.info(f"Health endpoint started on 0.0.0.0:{port}")

    # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
    try:
        await asyncio.Event().wait()
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        await application.updater.stop()
        await application.stop()
        await application.shutdown()
        await runner.cleanup()

if __name__ == "__main__":
    # –û–¥–∏–Ω event loop, –±–µ–∑ –ø–æ—Ç–æ–∫–æ–≤ ‚Äî –Ω–∞–¥—ë–∂–Ω–æ –¥–ª—è Python 3.13/asyncio
    asyncio.run(main())
