import os
import asyncio
import logging

from aiohttp import web
from telegram import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ---------- –õ–æ–≥–∏ ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("bugman")

# ---------- –ö–æ–Ω—Ñ–∏–≥ ----------
# –í Render –¥–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN (–æ–±—è–∑.)
TOKEN = os.environ["TOKEN"]

# ---------- Telegram-handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /start command.

    Always sends the Bugman GIF followed by a welcome message with an
    inline button linking to the game.
    """

    chat_id = update.effective_chat.id

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É.
    try:
        await context.bot.send_animation(
            chat_id=chat_id, animation=FSInputFile("bugman.gif")
        )
    except Exception:
        log.exception("Failed to send start GIF")

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
    text = (
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ *Bugman*.\n"
        "–¢—ã ‚Äî –∂—ë–ª—Ç—ã–π, –æ–Ω–∏ ‚Äî –∑–ª—ã–µ, –º–æ–Ω–µ—Ç–∫–∏ ‚Äî –≤–∫—É—Å–Ω—ã–µ.\n\n"
        "–í—ã–∂–∏–≤–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ª—å—à–µ –∏ —Å—Ç–∞–Ω—å –ª–µ–≥–µ–Ω–¥–æ–π!\n"
        "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ: –∏–≥—Ä–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤—ã–∫–∞–Ω–∏–µ üòé\n\n"
        "üéØ –ñ–º–∏ ¬´–ò–≥—Ä–∞—Ç—å¬ª –∏ –¥–æ–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –≥–ª–∞–≤–Ω—ã–π –≤ —ç—Ç–æ–º –ª–∞–±–∏—Ä–∏–Ω—Ç–µ."
    )

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏–≥—Ä—É
    kb = [[InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", url="https://t.me/bugman_bot/myapp")]]
    markup = InlineKeyboardMarkup(kb)

    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=markup,
    )

# ---------- Aiohttp health ----------
async def health(_: web.Request) -> web.Response:
    return web.Response(text="Bugman bot is running ‚úÖ")

# ---------- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π main: –±–æ—Ç + –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ–¥–Ω–æ–º event loop ----------
async def main():
    # --- Telegram Application ---
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (polling) –±–µ–∑ run_polling, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Ü–∏–∫–ª–æ–º —Å–∞–º–∏
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    log.info("Telegram bot polling started")

    # --- Aiohttp server (–¥–ª—è Render) ---
    port = int(os.environ.get("PORT", 10000))
    app = web.Application()
    app.router.add_get("/", health)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()
    log.info(f"Health endpoint started on 0.0.0.0:{port}")

    # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
    try:
        await asyncio.Event().wait()
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        await application.updater.stop()
        await application.stop()
        await application.shutdown()
        await runner.cleanup()

if __name__ == "__main__":
    # –û–¥–∏–Ω event loop, –±–µ–∑ –ø–æ—Ç–æ–∫–æ–≤ ‚Äî –Ω–∞–¥—ë–∂–Ω–æ –¥–ª—è Python 3.13/asyncio
    asyncio.run(main())
